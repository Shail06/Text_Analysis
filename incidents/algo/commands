from incidents.algo.initialization import Initialize
ini = Initialize()
from incidents.algo.predictions import Learner
lnr = Learner()
df_in = ini.load_input("sample.csv")
df_clean = ini.generate_clean_dataframe(df_in, list(df_in.columns))
lnr.activate_classifier()
dd , riter = lnr.process_single_incident(df_clean, True)





################### Single Incidents Pagination #####################


from incidents.algo.execution import ExecuteScenario
exe 	= ExecuteScenario()
cols 	= exe.get_column_headers('uploads/sample20170914-133821.csv')
df_output    = exe.get_predicted_dataframe(cols[1:])
df_output.values.tolist()


from django.core.paginator import Paginator
paginator = Paginator(df_output.values.tolist(), 1)


dd,r = exe.get_first_incident(cols[0], cols[1:])
from incidents.models import Uploaded_Data
updata = Uploaded_Data()
updata.incident_id = dd[0]
updata.description = dd[1]
updata.summary = dd[2]
updata.set_predictions(dd[3])


	class Meta:
		db_table = 'knowledge_base'
		managed = False


################## Enhance Knowlegde #############

from incidents.models import knowledge
from incidents.algo.initialization import Initialize
ini = Initialize()
df_knowledge = ini.load_input("incidents/algo/input/incident_knowledge.csv")
df_knowledge = df_knowledge.drop('Incident ID', axis = 1)
knw = knowledge()
for index, row in df_knowledge.iterrows():
	knw = knowledge()
	knw.summary = row['summary']
	knw.label = row['label']
	knw.save()

###################################################



import time

start = time.time()
print("hello")
end = time.time()
print(end - start)






import cython
def f_plain(x):
	return x * (x - 1)

def integrate_f_plain(a, b, N):
	s = 0
	dx = (b - a) / N
	for i in range(N):
		s += f_plain(a + i * dx)
	return s * dx

import time
import numpy as np
import pandas as pd
df = pd.DataFrame({'a': np.random.randn(1000), 'b': np.random.randn(1000),'N': np.random.randint(100, 1000, (1000)),'x': 'x'})
start = time.time()
df.apply(lambda x: integrate_f_plain(x['a'], x['b'], x['N']), axis=1)
end= time.time()
end -start


import time
from incidents.algo.execution import ExecuteScenario
exec_scenario = ExecuteScenario()
file = "uploads/RSLF_Incident_Analysis_RawData (copy)20170917-000340.xlsx"
df_cols = exec_scenario.get_column_headers(file)
#start = time.time()
prun -l 4 exec_scenario.get_predicted_dataframe(['Short Text','Long Description'])
#end= time.time()
#end -start


################# SQLITE-3 ####################
from incidents.db_populate import PopulateDB
db_obj = PopulateDB()
res = db_obj.cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
for name in res:
	print(name[0])
